DROP TABLE IF EXISTS friends;
DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS film_genre;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS users;

CREATE TABLE IF NOT EXISTS genres
(
genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name varchar(20) NOT NULL
);

CREATE TABLE IF NOT EXISTS ratings
(
rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name varchar(10)
);

CREATE TABLE IF NOT EXISTS users
(
user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
email varchar(50) NOT NULL,
login varchar(20) NOT NULL,
name varchar(20),
birthday date NOT NULL
CONSTRAINT email_not_empty_check CHECK(email <> ''),
CONSTRAINT login_not_empty_check CHECK(login <> '')
);

CREATE TABLE IF NOT EXISTS friends
(
user_id INTEGER REFERENCES users(user_id),
friend_id INTEGER REFERENCES users(user_id),
status_of_friendship BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE IF NOT EXISTS films
(
film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name varchar(50) NOT NULL,
description varchar(200) NOT NULL,
release_date date NOT NULL,
duration INTEGER,
rating_id INTEGER REFERENCES ratings(rating_id)
CONSTRAINT duration_check CHECK(duration > 0)
);

CREATE TABLE IF NOT EXISTS film_genre
(
film_id INTEGER REFERENCES films(film_id),
genre_id INTEGER REFERENCES genres(genre_id),
PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS likes
(
film_id INTEGER REFERENCES films(film_id) ON DELETE CASCADE,
user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
PRIMARY KEY (film_id, user_id)
);